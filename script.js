'use strict'
//МАССИВЫ
/* в этом файле переменные названы максимально по уебански 
чтобы не комментировать все лишний раз и сразу можно было подсмотреть 
на работу тех или иных методов и функций*/
// Создание массива

let arr1 = new Array(); // Используется редко
let arr = [];

// Значения массива
// Получение значений


let arrOne = [
	'Ваня', // 0я позиция
	'Иштван', // 1я позиция
	'Оля', // 2я позиция
];
console.log(arrOne[1]);
console.log(arrOne[5]); // undefined



let arrTwo = [
	"Коля",
	{
		type: "JS",
		age: 36
	},
	true,
	function () {
		console.log('Привет, я Коля');
	}
];

console.log(arrTwo);
console.log(arrTwo[0]);
console.log(arrTwo[1].type); // доступ к ключу объекта внутри массива 
console.log(arrTwo[2]);
arrTwo[3]();// вызов функции из массива 

// Многомерные массивы внутри массива лежат массивы 
let matrix = [
	[1, 2, 3],
	[4, 5, 6],
	[7, 8, 9]
];
console.log(matrix);
console.log(matrix[0][1]); /* в данном случае 0 в скобках вызывает первый массив 
а 1 возвращает нам второй элемент внутри первого массива*/

// Длина массива. Свойство length

let arrOneA = ['Ваня', 'Иштван', 'Оля',];
console.log(arrOne);
console.log(arrOne.length);


arrOneA.length = 0;
console.log(arrOne);

// Таким образом, самый простой способ
// очистить массив – это arrOne.length = 0;


// Доступ к массиву
/*
Напомню что массив является объектом и, следовательно,
ведёт себя как объект. Например, копируется по ссылке:
*/

let arrc = ['Ваня', 'Иштван', 'Оля',];
console.log(arrc);

let arrNew = arrc;

arrNew.length = 2;// указываем длинну масива в 2 откидывая третий элемент 

console.log(arrc);


// Изменение значений
let arrC = ['Ваня', 'Иштван', 'Оля',];

// Меняем существующее ваню на колю
arrC[0] = 'Коля';
console.log(arrC);

// Добавляем новое под третье значение которого нет добавляем ваню
arrC[3] = 'Ваня';
console.log(arrC);

// МЕТОДЫ МАССИВОВ

/*
Первый из них это очередь или упорядоченная коллекция элементов.
Очередь поддерживает два вида операций:
1. добавление элемента в конец очереди
2. удаление элемента в начале, сдвигая очередь,
	так что второй элемент становится первым.

Другой вариант применения для массивов – структура данных,
называемая стек.
Стек поддерживает два вида операций:
1. добавление элемента в конец
2. удаление последнего элемента

Массивы в JavaScript могут работать и как очередь, и как стек.
Мы можем добавлять/удалять элементы как в начало, так и в конец массива.
И в этом нам помогут следующие методы:
*/


// Метод push - добавляет элемент в конец массива

let arrB = ['Ваня', 'Иштван', 'Оля',];
arrB.push('Вася');
console.log(arrB);

arrB.push('Дима', 'Катя');
console.log(arrB);

// Метод shift - удаляет элемент в начале,
// так что второй элемент становится первым.

let arrD = ['Ваня', 'Иштван', 'Оля',];
arrD.shift();
console.log(arrD);

// Метод pop  - удаляет последний элемент

let arrE = ['Ваня', 'Иштван', 'Оля',];
arrE.pop();
console.log(arrE);

// Метод unshift  - добавляет элемент в начало массива

let arrF = ['Ваня', 'Иштван', 'Оля',];
arrF.unshift('Вася');
console.log(arrF);

arrF.unshift('Дима', 'Катя');
console.log(arrF);
/*
Методы push/pop выполняются быстро, а методы shift/unshift – медленно.

Давайте рассмотрим на примере добавления элемента
в начало массива (unshift);

Просто взять и добавить элемент с номером 0 недостаточно.
Нужно также заново пронумеровать остальные элементы.

Операция unshift должна выполнить 3 действия:
1. Добавить элемент с индексом 0.
2. Сдвинуть все элементы вправо, заново пронумеровать их,
	заменив 0 на 1, 1 на 2 и т.д.
3. Обновить свойство length.

Чем больше элементов содержит массив, тем больше
времени потребуется для того, чтобы их переместить,
больше операций с памятью.

А вот что бы добавить элемент в конец массива (метод push)
не нужно ничего перемещать.
Так же не нужно заново нумеровать элементы. Достаточно
увеличить значение length.
*/


// Удаление/добавление/изменение конкретных элементов


let arrG = ['Ваня', 'Иштван', 'Оля',];

delete arrG[1];
console.log(arrG);// элемента под ключем 1 нет, но его место осталось
console.log(arrG[1]);// выдает андефайнед
console.log(arrG.length);// хоть мы и удалили элемент под ключем 1 длина массива не меняется

// Метод splice. Позволяет добавлять, удалять и заменять элементы.
// Синтаксис arr.splice(index[, deleteCount, elem1, ..., elemN])

// Удаляем элемент
let arrOnee = ['Ваня', 'Иштван', 'Оля',];
// Начиная с первой позиции (Иштван), удаляем один элемент
arrOnee.splice(1, 1);
console.log(arrOnee);

// Удаляем элемент и возвращаем его в переменную
let arrTwoo = ['Ваня', 'Иштван', 'Оля',];
let removed = arrTwoo.splice(1, 1);
console.log(removed);// переменная ремувд получает вырезанный кусок массива арртвоо и сама становится массивом 

// Заменяем элементы
let arrThree = ['Ваня', 'Иштван', 'Оля',];
// Начиная с нулевой позиции (Ваня), заменяем один элемент
arrThree.splice(0, 1, 'Коля');// тут мы после запятой перезаписывыем элемент в массив 
console.log(arrThree);

// Добавляем элементы
let arrFour = ['Ваня', 'Иштван', 'Оля',];
// Начиная с первой позиции (перед 'Иштван'), добавляем два элемента
arrFour.splice(1, 0, 'Коля', 'Маша');
console.log(arrFour);

// Удаляем элемент
let arrFive = ['Ваня', 'Иштван', 'Оля',];
// Начиная с последней позиции (Оля), удаляем один элемент
arrFive.splice(-1, 1);
console.log(arrFive);




// Метод slice.
// Cоздаёт новый массив, в который копирует часть либо весь массив
// Синтаксис arr.slice([start], [end]) Не включая [end]

// Копируем часть массива
let arrOneA = ['Ваня', 'Иштван', 'Оля',];

// Начиная с 1й позиции 'Иштван',
// до 2й позиции 'Оля' (не включая)
let arrTwoA = arrOneA.slice(1, 2);
console.log(arrTwoA);

// Начиная с предпоследней позиции 'Иштван',
// до последней 'Оля' (не включая)
let arrThreeA = arrOneA.slice(-2, -1);
console.log(arrThreeA);

// Копируем весь массив
let arrFourA = arrOneA.slice();
console.log(arrFourA);



// Метод concat.
// Cоздаёт новый массив, в который копирует данные из других массивов
// и дополнительные значения (в конец массива)
// Синтаксис arr.concat(arg1, arg2...)

let arrOneB = ['Ваня', 'Иштван', 'Оля',];
let arrTwoB = arrOneB.concat('Петя');// тут мы добавляем новый эллемент в конец скопированного массива 
console.log(arrTwoB);



// Поиск в массиве

// Методы indexOf/lastIndexOf и includes
// алналоги строковым методам
/*
1. arr.indexOf(item, from) ищет item, начиная с индекса from,
	и возвращает индекс, на котором был найден искомый
	элемент, в противном случае - 1.
2. arr.lastIndexOf(item, from) – то же самое, но ищет справа налево.
3. arr.includes(item, from) – ищет item, начиная с индекса from,
	и возвращает true, если поиск успешен.
*/


let arrOneK = ['Ваня', 'Иштван', 'Оля',];

// indexOf
console.log(arrOneK.indexOf('Иштван'));
console.log(arrOneK.indexOf('Вася'));
console.log(arrOneK.indexOf('Иштван', 2));

// includes
console.log(arrOneK.includes('Иштван'));
console.log(arrOneK.includes('Вася'));
console.log(arrOneK.includes('Иштван', 2));


//------------------------

// find и findIndex
// поиск в массиве объектов с пределённым условием


// Синтаксис
let resultt = arrOneK.find(function(item, index, array) {
  // если true - возвращается текущий элемент и перебор прерывается
  // если все итерации оказались ложными, возвращается undefined
});


let arrOneL = [
	{ name: 'Вася', age: 36 },
	{ name: 'Коля', age: 18 },
	{ name: 'Оля', age: 'Не скажу' },
]

let resultOneL = arrOneL.find(function (item, index, array) {
	return item.age === 18;
});

let resultOnew = arr.find(item => item.age === 18);
console.log(resultOnew);//возвращает нам только айтемы у которых показатель возраст строго 18


//findIndex возвращает ключ элемента тоесть 1 позиция 
let resultTwo = arrOneL.findIndex(item => item.age === 18);
console.log(resultTwo);


//------------------------

// filter
// Метод ищет все элементы, на которых функция-колбэк вернёт true.

let results = arr.filter(function (item, index, array) {
	// если true - элемент добавляется к результату, и перебор продолжается
	// возвращается пустой массив в случае, если ничего не найдено
});


let arrTwoK = [
	{ name: 'Вася', age: 36 },
	{ name: 'Коля', age: 18 },
	{ name: 'Оля', age: 'Не скажу' },
]
let result = arrTwoK .filter(function (item, index, array) {
	return item.age >= 18;
});
console.log(result);

//ПРОДОЛЖЕНИЕ ВО ВТОРОМ ФАЙЛЕ

